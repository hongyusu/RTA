





Random spanning tree approximation in L2 norm regularization for structured output prediction.

Please start with run_RSTA.m.

To compile the code, please make sure you have gcc compiler that supports OMP. The C codes can be compile with the following commands (note that you might need to change the path of gcc compiler)
	mex compute_topk_omp.c forward_alg_omp.c backward_alg_omp.c  CFLAGS="\$CFLAGS -fopenmp" LDFLAGS="\$LDFLAGS -fopenmp" CC="/usr/local/bin/gcc -std=c99"
	mex find_worst_violator_new.c
Run an example:
	run_RSTA('ArD15','tree','5','1','1','2','2')


auto_run_RSTA.py
auto_profile_RSTA.py
	The python scripts will run/profile Random Spanning Tree Approximation algorithm parallel on interactive cluster.
	The parallelism is for the purpose of multiple parameters and datasets.
	The scripts use the help of Python thread and queue package.
	The framework looks at each combination of parameters as a job and pools all jobs into a job queue.
	A group of workers (computing nodes) are then activated, each will take and process from the queue the first job.
	If the job is not completed by the worker, the worker will push the job back to the queue and will be processed later on.
	