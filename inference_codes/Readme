





Random spanning tree approximation in L2 norm regularization for structured output prediction.

Please start with run_RSTA.m.

To compile the code, please make sure you have gcc compiler that supports OMP. The C codes can be compile with the following commands (note that you might need to change the path of gcc compiler)
	mex compute_topk_omp.c forward_alg_omp.c backward_alg_omp.c  CFLAGS="\$CFLAGS -fopenmp" LDFLAGS="\$LDFLAGS -fopenmp" CC="/usr/local/bin/gcc -std=c99"
	mex find_worst_violator_new.c
Run an example:
	run_RSTA('ArD15','tree','5','1','1','2','2')

auto_run_RSTA.py
	python script which runs random spanning tree approximation algorithm parallelly on cluster, the script uses python multiple thread package and implement a 'worker' class.
	The worker class maintains a job queue and automatically gets the first job from the queue.
	THe worker class can also put back job that is not well done back to the queue.
